//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfCalculatorClient.CalculatorServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MathFault", Namespace="mpp.mksn.by/MySuperCalculator")]
    [System.SerializableAttribute()]
    public partial class MathFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProblemTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationField, value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProblemType {
            get {
                return this.ProblemTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProblemTypeField, value) != true)) {
                    this.ProblemTypeField = value;
                    this.RaisePropertyChanged("ProblemType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="mpp.mksn.by/MySuperCalculator", ConfigurationName="CalculatorServiceReference.MySuperCalculator")]
    public interface MySuperCalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Add", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/AddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfCalculatorClient.CalculatorServiceReference.MathFault), Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/AddMathFaultFault", Name="MathFault")]
        double Add(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Add", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Substract", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/SubstractResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfCalculatorClient.CalculatorServiceReference.MathFault), Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/SubstractMathFaultFault", Name="MathFault")]
        double Substract(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Substract", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/SubstractResponse")]
        System.Threading.Tasks.Task<double> SubstractAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Multiply", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/MultiplyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfCalculatorClient.CalculatorServiceReference.MathFault), Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/MultiplyMathFaultFault", Name="MathFault")]
        double Multiply(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Multiply", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Divide", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/DivideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfCalculatorClient.CalculatorServiceReference.MathFault), Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/DivideMathFaultFault", Name="MathFault")]
        double Divide(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Divide", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Sqrt", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/SqrtResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfCalculatorClient.CalculatorServiceReference.MathFault), Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/SqrtMathFaultFault", Name="MathFault")]
        double Sqrt(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="mpp.mksn.by/MySuperCalculator/MySuperCalculator/Sqrt", ReplyAction="mpp.mksn.by/MySuperCalculator/MySuperCalculator/SqrtResponse")]
        System.Threading.Tasks.Task<double> SqrtAsync(double a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MySuperCalculatorChannel : WcfCalculatorClient.CalculatorServiceReference.MySuperCalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MySuperCalculatorClient : System.ServiceModel.ClientBase<WcfCalculatorClient.CalculatorServiceReference.MySuperCalculator>, WcfCalculatorClient.CalculatorServiceReference.MySuperCalculator {
        
        public MySuperCalculatorClient() {
        }
        
        public MySuperCalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MySuperCalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MySuperCalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MySuperCalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double a, double b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double a, double b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public double Substract(double a, double b) {
            return base.Channel.Substract(a, b);
        }
        
        public System.Threading.Tasks.Task<double> SubstractAsync(double a, double b) {
            return base.Channel.SubstractAsync(a, b);
        }
        
        public double Multiply(double a, double b) {
            return base.Channel.Multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double a, double b) {
            return base.Channel.MultiplyAsync(a, b);
        }
        
        public double Divide(double a, double b) {
            return base.Channel.Divide(a, b);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double a, double b) {
            return base.Channel.DivideAsync(a, b);
        }
        
        public double Sqrt(double a) {
            return base.Channel.Sqrt(a);
        }
        
        public System.Threading.Tasks.Task<double> SqrtAsync(double a) {
            return base.Channel.SqrtAsync(a);
        }
    }
}
